# bot.py ‚Äî A.V Cleaning (aiogram v3)
import asyncio
from aiogram import Router, F, Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤ —Å—Ç–∏–ª–µ CinCin

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton(text="üßπ –£—Å–ª—É–≥–∏"),
        KeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
        KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    )
    return kb
    
WELCOME = {
    "main": "<b>–ü—Ä–∏–≤–µ—Ç, {name}!</b>",
    "desc": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>A.V Cleaning</b> ‚Äî –∑–¥–µ—Å—å —á–∏—Å—Ç–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–±–æ—Ç—ã üßº‚ú®",
    "hint": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"
}

LOADING_ANIM = ["–ó–∞–≥—Ä—É–∑–∫–∞ üß∫", "–ó–∞–≥—Ä—É–∑–∫–∞ üßº", "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ ‚ú®", "–ì–æ—Ç–æ–≤–æ üíé"]

async def show_loading(msg: Message):
    for step in LOADING_ANIM:
        try:
            await msg.edit_text(step)
        except Exception:
            # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ edit ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            await msg.answer(step)
        await asyncio.sleep(0.6)

@router.message(F.text.in_(["/start", "start", "–Ω–∞—á–∞—Ç—å", "Start", "–°—Ç–∞—Ä—Ç"]))
async def start_cmd(msg: Message):
    await msg.answer(
        WELCOME.format(name=msg.from_user.full_name or msg.from_user.first_name),
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML,
    )

@router.message(F.text == "üßπ –£—Å–ª—É–≥–∏")
async def show_services(msg: Message):
    sent = await msg.answer("üïì –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥‚Ä¶")
    await show_loading(sent)
    await msg.answer("üßπ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</b>
–ö–∞–∂–¥–∞—è —É–±–æ—Ä–∫–∞ ‚Äî —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º ‚ú®", parse_mode=ParseMode.HTML)

@router.message(F.text == "üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_bookings(msg: Message):
    sent = await msg.answer("üìã –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏‚Ä¶")
    await show_loading(sent)
    await msg.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ù–∞–∂–º–∏—Ç–µ üßπ <b>–£—Å–ª—É–≥–∏</b>, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é.", parse_mode=ParseMode.HTML)

@router.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(msg: Message):
    await msg.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ: @a.vcleaning_support üíé", parse_mode=ParseMode.HTML)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(msg: Message):
    await msg.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>
–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è, –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.", parse_mode=ParseMode.HTML)

async def run_bot():
    from os import getenv
    token = getenv("TELEGRAM_BOT_TOKEN") or "YOUR_TELEGRAM_BOT_TOKEN"
    bot = Bot(token=token, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(run_bot())
